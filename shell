#!/bin/bash
declare -a data
data=(0 0 0 0 0)
error_type=(0 0 0 0 0)
gcc main.c >&output.txt
func_handler()
{
input=input.txt
while read line; do
	error_type[0]=$1;
	error_type[1]=$2;
	error_type[2]=$3;
	error_code=$3;
	#check key of error return 0 or 1
        data[0]=$(echo $line|grep "${error_type[0]}"|wc -l)
        data[1]=$(echo $line|grep "${error_type[1]}"|wc -l)
        data[2]=$(echo $line|grep "${error_type[2]}"|wc -l)
        sum=$(( ${data[0]} + ${data[1]} + ${data[2]} ))
        case $sum in
                ${data[0]})
			# unknown type name error
			er=$(echo $line|awk '{for ( i = 1; i <= NF; i++ )
			if ( $i=="name" ) print $(i+1)}')
                        ps=$(echo $line|awk '{print $0}'|cut -d':' -f2)
                        echo "unknown type $er $ps"
                        ;;
                ${data[1]})
			# expected character ";"
			er=$(echo $line|awk '{for ( i = 1; i <= NF; i++ )
			if ( $i=="before" ) print $(i+1)}')
			er1=$(echo $line|awk '{for ( i = 1; i <= NF; i++ )
			if ( $i=="expected" ) print $(i+1)}')
                        ps=$(echo $line|awk '{print $0}'|cut -d':' -f2)
                        echo "expected $er $er1 $ps"
                        ;;
                ${data[2]})
			# undeclared MACRO or variable
			er=$(echo $line|awk -v mvar=$3 '{for ( i = 1; i <= NF; i++ )
			if ( $i==mvar ) print $(i-1)}')      
			ps=$(echo $line|awk '{print $0}'|cut -d':' -f2)
                        echo "undeclared $er $ps"
                        ;;
             esac
done < "$input"
}

### main script start here

## check error

awk '/error:/ {print NR,$0}' output.txt>input.txt
func_handler unknown expected undeclared

## check warning

#awk '/warning:/ {print NR,$0}' output.txt>input.txt
#func_handler implicit 

